<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Luca Guidi</title>
 <link href="http://lucaguidi.com/atom.xml" rel="self"/>
 <link href="http://lucaguidi.com/"/>
 <updated>2015-01-02T10:40:14+00:00</updated>
 <id>http://lucaguidi.com/</id>
 <author>
   <name>Luca Guidi</name>
   <email>me@lucaguidi.com</email>
 </author>

 
 
 <entry>
   <title>A New Roadmap For Lotus</title>
   <link href="http://lucaguidi.com/2015/01/01/a-new-roadmap-for-lotus.html"/>
   <updated>2015-01-01T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2015/01/01/a-new-roadmap-for-lotus</id>
   <content type="html">&lt;p&gt;Last year &lt;a href=&quot;/2014/12/23/2014-retrospective-a-year-of-lotus.html&quot;&gt;was great&lt;/a&gt;, and 2015 brings new challenges to Lotus.&lt;/p&gt;

&lt;h2 id=&quot;learn-from-mistakes&quot;&gt;Learn from mistakes&lt;/h2&gt;

&lt;p&gt;When I released the first version back in June it was a wild, unexpected success.
There was an uncommon hype for the initial version of a &lt;em&gt;“yet another web framework for Ruby”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Probably, Lotus’ vision met the needs of a lot of developers in our Community.
The demand of a rich, stable ecosystem of libraries and patterns to build applications that are dead simple to build and maintain.&lt;/p&gt;

&lt;p&gt;But then there was six months of &lt;em&gt;“communication black-out”&lt;/em&gt;.
All the people whom actively followed the project, were aware that we were making some progress.
This wasn’t true for the &lt;em&gt;“outside world”&lt;/em&gt;, which is made of the rest of the Ruby and tech Community.
For those people, Lotus went out of the radar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This was clearly my mistake.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The result was an unenthusiastic reaction for the last release of December, even if it shipped &lt;strong&gt;long time requested features&lt;/strong&gt; like application generator or code reloading.&lt;/p&gt;

&lt;p&gt;I’ve learned that Open Source isn’t only about making the code accessible, but it’s about &lt;strong&gt;openness&lt;/strong&gt;: take collaborative decisions and be transparent.
I have a clear vision for Lotus, but I poorly communicated the idea in the last months.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lotus aims to be a complete, lightweight and stable alternative to build web applications with Ruby.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;fixing-those-mistakes&quot;&gt;Fixing those mistakes&lt;/h2&gt;

&lt;p&gt;Now that I have clarified the ultimate purpose of the project, how to get there?&lt;/p&gt;

&lt;p&gt;We’re activating new collaboration channels to serve our goal.
In the making there is &lt;strong&gt;a new website&lt;/strong&gt;, where to find &lt;strong&gt;guides&lt;/strong&gt; and a &lt;strong&gt;blog&lt;/strong&gt; to keep people updated on what’s going on.
We’re also activating a forum where to &lt;strong&gt;discuss features&lt;/strong&gt; and &lt;strong&gt;disclose security alerts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once features are be defined and prioritized for a milestone, you can track the planned, the current and the released functionalities so far.
You can use this &lt;a href=&quot;http://bit.ly/lotusrb-roadmap&quot;&gt;board&lt;/a&gt; to visualize the progress.&lt;/p&gt;

&lt;h2 id=&quot;core-team&quot;&gt;Core Team&lt;/h2&gt;

&lt;p&gt;Until now, Lotus was a project which taken the direction that I decided only by myself.
This was useful to move fast at the beginning, to express with code my initial imprint and to lay solid foundations for that idea.&lt;/p&gt;

&lt;p&gt;But Lotus is an ambitious project who can’t survive with only one individual.
I understood the need of &lt;a href=&quot;https://www.youtube.com/watch?v=YqXU4o24Hkg&quot;&gt;diversity&lt;/a&gt;, and bring real world experiences in the creation process.&lt;/p&gt;

&lt;p&gt;Starting from today, &lt;a href=&quot;http://ruby-journal.com&quot;&gt;Trung Lê&lt;/a&gt; (&lt;a href=&quot;https://github.com/joneslee85&quot;&gt;@joneslee85&lt;/a&gt;) will be part of the &lt;strong&gt;Lotus Core Team&lt;/strong&gt;.
Trung works at &lt;a href=&quot;http://www.envato.com/&quot;&gt;Envato&lt;/a&gt; and on &lt;a href=&quot;https://spreecommerce.com/&quot;&gt;Spree Commerce&lt;/a&gt;.
In the last months, we have been discussing every day about the direction of Lotus and his tireless dedication made &lt;a href=&quot;https://github.com/lotus/model&quot;&gt;Lotus::Model&lt;/a&gt; easier to use.
Thank you Trung, welcome aboard.&lt;/p&gt;

&lt;h2 id=&quot;priorities&quot;&gt;Priorities&lt;/h2&gt;

&lt;p&gt;So far I have talked about communication, open decisions, core team.
Those things are means to a few important values.&lt;/p&gt;

&lt;h3 id=&quot;stability&quot;&gt;Stability&lt;/h3&gt;

&lt;p&gt;Lotus relies on &lt;em&gt;“battle tested”&lt;/em&gt; libraries like &lt;a href=&quot;https://github.com/rtomayko/tilt&quot;&gt;Tilt&lt;/a&gt;, &lt;a href=&quot;http://sequel.jeremyevans.net/&quot;&gt;Sequel&lt;/a&gt;, &lt;a href=&quot;http://rack.github.io&quot;&gt;Rack&lt;/a&gt;, but it still needs to reach its stability as a software.
To fix blocking issues like bugs or improvements and release patch versions for them, will be our first priority.&lt;/p&gt;

&lt;p&gt;During the last year, there was too many people depending on the repository &lt;code&gt;HEAD&lt;/code&gt;.
This is bad because an application can suddenly break by updating gem dependencies.
We highly recommend to use released versions from &lt;a href=&quot;http://rubygems.org/gems/lotusrb&quot;&gt;Rubygems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’re also trying to &lt;strong&gt;avoid&lt;/strong&gt; as much as possible &lt;strong&gt;breaking changes&lt;/strong&gt; in the public API, even if we’re under 1.0.
Continuous, non-backward compatible reorganizations of code, destroy any chance that developers start an ecosystem around a technology.&lt;/p&gt;

&lt;p&gt;Think of &lt;a href=&quot;http://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;: it’s a terrific and innovative language, but nearly nobody uses it.
They kept changing too much, so companies were afraid of invest on it until now.&lt;/p&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;

&lt;p&gt;The second priority is about features.
We want to ship important functionalities to &lt;strong&gt;improve productivity&lt;/strong&gt; and the overall &lt;strong&gt;experience with Lotus&lt;/strong&gt;.
Things like migrations, associations, assets management, HTML helpers, HTTP API architecture, will be released in the next months.&lt;/p&gt;

&lt;h3 id=&quot;security&quot;&gt;Security&lt;/h3&gt;

&lt;p&gt;We care about security.
No vital application should be deployed in the wild without a serious assessment about data safety.
Lotus will ship and &lt;strong&gt;activate by default&lt;/strong&gt; mechanisms to protect applications and users from the most common attacks like &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;CSRF&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But there is more: we want to write short guides to &lt;strong&gt;make developers aware of the security measures&lt;/strong&gt; that they can use while building applications.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this will be another outstanding year for Lotus.
Please join us in this journey.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>2014 Retrospective: A Year Of Lotus</title>
   <link href="http://lucaguidi.com/2014/12/23/2014-retrospective-a-year-of-lotus.html"/>
   <updated>2014-12-23T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/12/23/2014-retrospective-a-year-of-lotus</id>
   <content type="html">&lt;p&gt;This has been &lt;strong&gt;a great year&lt;/strong&gt; for &lt;a href=&quot;http://lotusrb.org&quot;&gt;Lotus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the beginning of 2014 I decided to open source this less invasive and simple framework for Rack.&lt;/p&gt;

&lt;p&gt;Back in the day, it was just a software stored in my hard drive.
An experiment that turned to be a fresh take for web development with Ruby.
It had in it the seminal work of what is Lotus today, but it required &lt;strong&gt;patience&lt;/strong&gt; for its blossoming.&lt;/p&gt;

&lt;p&gt;We have the feeling that technology moves fast, but it’s a false myth.
All the preparatory work, the countless hours spent to lay foundations and refine details needs a very long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What it appears to be an overnight success, it took years instead.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This first one in Lotus’ life have traced the right direction for the project.
The Community is growing with nice, helpful and inclusive people.
I’ve personally mentored a few young programmers in their first Open Source contribution(s) and Lotus is sometimes used to &lt;a href=&quot;http://bitboxer.de/2014/10/26/teaching-ruby/&quot;&gt;teach web development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The software is slowly getting stable, feature after feature.&lt;/p&gt;

&lt;p&gt;Lotus has also been included in the last issue of &lt;a href=&quot;http://www.thoughtworks.com/radar/languages-and-frameworks/lotus&quot;&gt;ThoughtWorks’ Radar&lt;/a&gt; as emerging technology to assess in 2015.&lt;/p&gt;

&lt;h2 id=&quot;a-new-release&quot;&gt;A new release&lt;/h2&gt;

&lt;p&gt;Lotus is a modular web framework.
It scales from single file HTTP endpoints to multiple applications in the same Ruby process.
Flexibility is at the core.
The smart combination of &lt;strong&gt;conventions and configurations&lt;/strong&gt; gives the right balance between &lt;strong&gt;convenience and control&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;However, we recognized that all this power required some guidance.
People would be otherwise lost to understand how to write their first application.&lt;/p&gt;

&lt;p&gt;As of today, there is a new version out (&lt;code&gt;v0.2.0&lt;/code&gt;) which introduces code generators.&lt;/p&gt;

&lt;h3 id=&quot;container-architecture&quot;&gt;&lt;em&gt;Container&lt;/em&gt; architecture&lt;/h3&gt;

&lt;p&gt;The first architecture that we officially support is: &lt;em&gt;container&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It’s based on a few simple concepts: &lt;strong&gt;use cases&lt;/strong&gt; and &lt;strong&gt;applications&lt;/strong&gt;.
Use cases (features) should be implemented in &lt;code&gt;lib/&lt;/code&gt; with a combination of pure objects and the needed Ruby gems.
One or more Lotus applications live in &lt;code&gt;apps/&lt;/code&gt;. They are isolated each other, and depend only on the code in &lt;code&gt;lib/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each of them should serve for only one purpose: user facing web application, administrative backend, JSON API, metrics dashboard, etc.&lt;/p&gt;

&lt;p&gt;This architecture has important advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Code reusability.&lt;/strong&gt; You can consume a feature from the Web UI or from a HTTP API. Each one can be different Lotus application or simple Rack based endpoints.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Decoupled components.&lt;/strong&gt; The core of your application depends only on a few gems and it doesn’t need to worry about the Web/HTTP/Console/Background jobs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Applications are built like a gem&lt;/strong&gt;, this ease the process of package them and share between projects, without the need of carry a lot of dependencies.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Avoid monoliths&lt;/strong&gt;. Each Lotus application under &lt;code&gt;apps/&lt;/code&gt; is a candidate for later on extraction into a separated &lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;&lt;em&gt;microservice&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last point is crucial. In the early days of a new project is really convenient to build and deploy all the code together.
But as the time passes, it can become &lt;strong&gt;nearly impossible&lt;/strong&gt; to extract sets of cohesive functionalities into separated deliverables.
Lotus helps to plan those things ahead of time, but &lt;strong&gt;without the burden&lt;/strong&gt; that is required by those choices, because it support multiple applications natively.&lt;/p&gt;

&lt;p&gt;Getting started with Lotus is really easy now:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;% gem install lotusrb
% lotus new bookshelf
% &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;bookshelf &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bundle
% bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;lotus server &lt;span class=&quot;c&quot;&gt;# visit http://localhost:2300&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;other-features&quot;&gt;Other features&lt;/h3&gt;

&lt;p&gt;This new version brings useful changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Command line tools like console and server with code reloading&lt;/li&gt;
  &lt;li&gt;Control on Rack middleware, cookies, sessions, HTTP caching, Conditional GET, MIME types, etc.&lt;/li&gt;
  &lt;li&gt;Params whitelisting and validations&lt;/li&gt;
  &lt;li&gt;A simplified API for the model layer&lt;/li&gt;
  &lt;li&gt;File system database adapter for rapid, schemaless prototyping&lt;/li&gt;
  &lt;li&gt;Bug fixes and perf improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;

&lt;p&gt;This 2014 went over my expectations. The plans for the next year will be announced soon.&lt;/p&gt;

&lt;p&gt;Until then, I encourage to give it a try: it’s already compatible with Ruby 2.2, which will be released in two days.&lt;/p&gt;

&lt;p&gt;As last thing, I’m grateful for &lt;strong&gt;all the people&lt;/strong&gt; who made this release possible. &lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Discuss this article on &lt;strong&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=8788527&quot;&gt;HackerNews&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Introducing Lotus::Validations</title>
   <link href="http://lucaguidi.com/2014/10/23/introducing-lotus-validations.html"/>
   <updated>2014-10-23T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/10/23/introducing-lotus-validations</id>
   <content type="html">&lt;p&gt;Data validation is an important piece in software architecture.
It guarantees that the successive layers will operate on correct input.
In the existing Ruby frameworks we’re used to see this responsibility flatten down into models.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that we end to mix a lot of validations for &lt;strong&gt;different use cases&lt;/strong&gt; in a &lt;strong&gt;single place&lt;/strong&gt;.
When the application grows in complexity, we add new validations.
If often happens that some rules are incompatible with others, then we introduce nasty conditionals to trigger only a subset of them.&lt;/p&gt;

&lt;p&gt;Have you ever seen something like this?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates_presence_of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password_required?&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;password_required?&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invited_user?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin_password_reset?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I did, and it makes maintenance a nightmare.&lt;/p&gt;

&lt;p&gt;If we think better at the role of the validations we notice a few interesting things.&lt;/p&gt;

&lt;h2 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h2&gt;

&lt;p&gt;First, they are the expressions of the rules that we need for a specific use case.&lt;/p&gt;

&lt;p&gt;In the example above, we want to force an user who self register for our service to choose a password.
We’ll call this the &lt;em&gt;“Signup”&lt;/em&gt; use case.&lt;/p&gt;

&lt;p&gt;But then we introduce a second feature: &lt;em&gt;“Invitations”&lt;/em&gt;.
An existing user can ask someone to join.
Because the invitee will decide a password later on, we want to persist that &lt;code&gt;User&lt;/code&gt; record without that value.
That’s why we had to put that conditional in place.&lt;/p&gt;

&lt;p&gt;It turns out that &lt;strong&gt;validations aren’t absolute rules for data integrity of a model&lt;/strong&gt;.
An &lt;code&gt;User&lt;/code&gt; can be persisted with or without a password, &lt;strong&gt;depending on the workflow&lt;/strong&gt; that the it was routed into.&lt;/p&gt;

&lt;p&gt;In other words, we’re assigning too much responsibilities to &lt;code&gt;User&lt;/code&gt;.
We should move integrity check into the use case code.&lt;/p&gt;

&lt;h2 id=&quot;boundaries&quot;&gt;Boundaries&lt;/h2&gt;

&lt;p&gt;The second important aspect is that we use validations to prevent invalid inputs to propagate in our system.
In an MVC architecture, the model layer is the &lt;strong&gt;farthest&lt;/strong&gt; from the input.
It isn’t expensive to check the data right before we create a record in the database?&lt;/p&gt;

&lt;p&gt;If we consider correct data as a precondition &lt;strong&gt;before&lt;/strong&gt; to start our workflow, we should stop unacceptable inputs as soon as possible.&lt;/p&gt;

&lt;p&gt;Think of the following method.
We don’t want to continue if the data is invalid for us.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expensive_computation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;lotus&quot;&gt;Lotus&lt;/h2&gt;

&lt;p&gt;For those reasons, Lotus doesn’t have validations in &lt;a href=&quot;https://github.com/lotus/model/blob/master/lib/lotus/entity.rb&quot;&gt;entities&lt;/a&gt;.
I recently introduced &lt;a href=&quot;https://github.com/lotus/controller/blob/master/README.md#validations--coercions&quot;&gt;params validations&lt;/a&gt; to Lotus::Controller.&lt;/p&gt;

&lt;p&gt;Actions are closer to the user input, they have the role to check if it’s valid and eventually pass the control to the other layers.
Otherwise, we can decide to stop the execution and return a failing response.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/controller&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Controllers::Signup&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Create&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;halt&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid?&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At that point, I recognized that other developers probably still want validations in their models, or they want to use service objects (interactors) for this goal.&lt;/p&gt;

&lt;p&gt;In the spirit of Lotus philosophy, I’m introducing today a single purpose library: &lt;code&gt;Lotus::Validations&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lotusvalidations&quot;&gt;Lotus::Validations&lt;/h2&gt;

&lt;p&gt;It’s a small, but yet powerful library.
In just &lt;code&gt;~140&lt;/code&gt; lines of code, it offers validations like acceptance, presence, size, inclusion, confirmation..&lt;/p&gt;

&lt;p&gt;The API is really intuitive.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/validations&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Signup&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validations&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;inclusion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It leverages on Ruby’s &lt;a href=&quot;http://rubylearning.com/satishtalim/duck_typing.html&quot;&gt;Duck Typing&lt;/a&gt; to make the existing rules adaptable to a vast variety of objects.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/validations&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Signup&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MEGABYTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validations&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:avatar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MEGABYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the case above, we want to make sure that the SSN number, to be exactly of size &lt;code&gt;11&lt;/code&gt;.
It works because internally it uses &lt;code&gt;String#size&lt;/code&gt;.
Now, because Rack frameworks use &lt;code&gt;Tempfile&lt;/code&gt; to represent uploaded data, and it responds to &lt;code&gt;#size&lt;/code&gt;.
We are able to refuse avatars larger than 5 megabytes with the same kind of validation.&lt;/p&gt;

&lt;p&gt;The framework offers coercion facilities both for Ruby and custom types.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/validations&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BirthDate&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validations&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;ss&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:birthday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BirthDate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;birthday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Jun 23&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;birthday&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt;#&amp;lt;BirthDate:0x007f947f8d91c0 @date=#&amp;lt;Date: 2014-06-23 ((2456832j,0s,0n),+0s,2299161j)&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-features&quot;&gt;Other features&lt;/h2&gt;

&lt;p&gt;This library offers other validations, they are explained in detail in the &lt;a href=&quot;https://github.com/lotus/validations#lotusvalidations&quot;&gt;README&lt;/a&gt; and the &lt;a href=&quot;http://rdoc.info/gems/lotus-validations&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Meaningful Exceptions</title>
   <link href="http://lucaguidi.com/2014/09/22/meaningful-exceptions.html"/>
   <updated>2014-09-22T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/09/22/meaningful-exceptions</id>
   <content type="html">&lt;p&gt;Writing detailed API documentation helps to improve software design.&lt;/p&gt;

&lt;p&gt;We already know that explaining a concept to someone leads us to a better grasp. &lt;strong&gt;This is true for our code too.&lt;/strong&gt;
This &lt;em&gt;translation&lt;/em&gt; process to a natural language forces us to think about a method from the outside perspective.
We describe the intent, the input, the output and how it reacts under unexpected conditions.
Put it in black and white and you will find something to refine.&lt;/p&gt;

&lt;p&gt;It happened to me recently.&lt;/p&gt;

&lt;p&gt;I was reviewing some changes in &lt;a href=&quot;http://rubygems.org/gems/lotus-utils&quot;&gt;lotus-utils&lt;/a&gt;, while I asked myself: &lt;em&gt;“What if we accidentally pass &lt;code&gt;nil&lt;/code&gt; as argument here”?&lt;/em&gt;
The answer was easy: &lt;code&gt;NoMethodError&lt;/code&gt;, because &lt;code&gt;nil&lt;/code&gt; doesn’t respond to a specific method that the implementation invokes.&lt;/p&gt;

&lt;p&gt;A minute later, there was already an unit test to cover that case and a new documentation detail to explain it. Solved.&lt;/p&gt;

&lt;p&gt;Well, not really. Let’s take a step back before.&lt;/p&gt;

&lt;h2 id=&quot;first-solution&quot;&gt;First solution&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;When we design public API, we are deciding the way that client code should use our method&lt;/strong&gt; and what to expect from it.
Client code doesn’t know nothing about our implementation, and it shouldn’t be affected if we change it.&lt;/p&gt;

&lt;p&gt;The technical reason why the code raises that exception  is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;quot;//&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; NoMethodError&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first solution was to catch that error and to re-raise &lt;code&gt;ArgumentError&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improved-solution&quot;&gt;Improved solution&lt;/h2&gt;

&lt;p&gt;During the process of writing this article, I’ve recognized two problems with this proposal.&lt;/p&gt;

&lt;p&gt;The first issue is about the implementation.
What if we refactor the code in a way that &lt;code&gt;NoMethodError&lt;/code&gt; is no longer raised?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;quot;//&amp;quot;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;quot;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our new implementation has changed the behavior visible from the outside world.
&lt;strong&gt;We have broken the software contract between our library and the client code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It expected &lt;code&gt;ArgumentError&lt;/code&gt; in case of &lt;code&gt;nil&lt;/code&gt;, but after that modification, this isn’t true anymore.&lt;/p&gt;

&lt;p&gt;The other concern is about the semantic of the exception.
According to &lt;a href=&quot;http://www.ruby-doc.org/core/ArgumentError.html&quot;&gt;RubyDoc&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“ArgumentError: Raised when the arguments are wrong and there isn’t a more specific Exception class.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have a more specific situation here, we expect a string, but we’ve got &lt;code&gt;nil&lt;/code&gt;.
Probably, &lt;code&gt;TypeError&lt;/code&gt; fits better our case.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Our test suite can be useful to check the correctness of a procedure under a deterministic scenario, but sometimes we write assertions under a narrowed point of view.&lt;/p&gt;

&lt;p&gt;Explaining the intent with API docs mitigates this problem and helps other people to understand our initial idea.&lt;/p&gt;

&lt;p&gt;Check if the semantic of the raised exceptions is coherent with that conceptualization.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Introducing Lotus</title>
   <link href="http://lucaguidi.com/2014/06/23/introducing-lotus.html"/>
   <updated>2014-06-23T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/06/23/introducing-lotus</id>
   <content type="html">&lt;p&gt;A year and a half ago I felt frustrated by the state of the art of web development with Ruby.
Secretly, in my spare time, I started hacking with new ideas, taking nothing for granted, destroying and starting from scratch several times, until the software was distilled in a beautiful API.&lt;/p&gt;

&lt;p&gt;It took me a decade to get here, by following a process of &lt;strong&gt;subtraction of what isn’t essential&lt;/strong&gt;.
Countless refinements to achieve modularity, to balance elegance with performance, and convenience with solid design.&lt;/p&gt;

&lt;p&gt;Each alternative was ponderated according to real world scenarios.
Use cases that have been pain points or good choices in my and other developers’ experience.&lt;/p&gt;

&lt;p&gt;But this project was sitting on my computer for too long.&lt;/p&gt;

&lt;p&gt;For this reason, at the beginning of the year, I &lt;a href=&quot;http://lucaguidi.com/2014/01/01/announcing-lotus.html&quot;&gt;announced&lt;/a&gt; the project and a slow release schedule.
Each month I’ve released a library because I wanted to share with other developers the result of this effort, and create a discussion in the Ruby community.
Now, six months and six frameworks later, I’m proud to introduce the main element: &lt;strong&gt;Lotus&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It’s &lt;a href=&quot;http://lotusrb.org&quot;&gt;a complete web framework&lt;/a&gt;, with a strong emphasis on object oriented design and testability.
If you use Lotus, you employ less DSLs and more objects, zero monkey-patching, separation of concerns between MVC layers.
Each library is designed to be small (under 500LOCs), fast and testable.&lt;/p&gt;

&lt;p&gt;There is &lt;a href=&quot;https://github.com/lotus/router&quot;&gt;Lotus::Router&lt;/a&gt; which is an HTTP router and &lt;a href=&quot;https://github.com/lotus/controller&quot;&gt;Lotus::Controller&lt;/a&gt; for controllers and actions.
They both speak the &lt;a href=&quot;http://rack.github.io&quot;&gt;Rack&lt;/a&gt; protocol, so they can be used in existing code base, or combined together for small API endpoint, or, again together, in a full stack Lotus app.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lotus/view&quot;&gt;Lotus::View&lt;/a&gt; is the first library for Ruby that marks a separation between view objects and templates.
While &lt;a href=&quot;https://github.com/lotus/model&quot;&gt;Lotus::Model&lt;/a&gt;, with repositories, data mapper and adapters helps to keep domain specific logic away from persistence.&lt;/p&gt;

&lt;p&gt;We have infinite combinations. &lt;strong&gt;Small components have enormous advantages in terms of reusability&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The power of these frameworks is combined together in Lotus applications.&lt;/p&gt;

&lt;p&gt;Microservices are at the core. Several independent applications can live together in the same Ruby process.&lt;/p&gt;

&lt;p&gt;Lotus has a smart mechanism of &lt;em&gt;framework duplication&lt;/em&gt;, where all the libraries can be employed several times.
As the code base grows up it can be easily split in smaller deliverables.&lt;/p&gt;

&lt;p&gt;Lotus has an &lt;a href=&quot;http://rdoc.info/gems/lotusrb&quot;&gt;extensive&lt;/a&gt; &lt;a href=&quot;https://github.com/lotus/lotus/blob/master/README.md&quot;&gt;documentation&lt;/a&gt;, that covers all the supported architectures.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;

&lt;p&gt;Lotus is still a young framework, that needs to reach a certain degree of code maturity.
Alongside with the vision that I have for the future features, it will improved by collecting &lt;a href=&quot;https://gitter.im/lotus/chat&quot;&gt;feedbacks&lt;/a&gt; from real world applications.&lt;/p&gt;

&lt;p&gt;Also, starting from today, I’ll offer &lt;strong&gt;free consultancy hours&lt;/strong&gt; to all the companies and individuals who are interested in Lotus.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Three Things To Know About Composition</title>
   <link href="http://lucaguidi.com/2014/06/09/three-things-to-know-about-composition.html"/>
   <updated>2014-06-09T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/06/09/three-things-to-know-about-composition</id>
   <content type="html">&lt;p&gt;A few days ago &lt;a href=&quot;https://twitter.com/tenderlove&quot;&gt;Aaron Patterson&lt;/a&gt; wrote a in &lt;a href=&quot;http://tenderlovemaking.com/2014/06/04/yagni-methods-slow-us-down.html&quot;&gt;interesting article&lt;/a&gt; about composition vs inheritance with Ruby.&lt;/p&gt;

&lt;p&gt;He says that when inheriting our classes directly from Ruby’s core objects such as &lt;code&gt;Array&lt;/code&gt;, our public API for that object will become too large and difficult to maintain.&lt;/p&gt;

&lt;p&gt;Consider a powerful object like &lt;code&gt;String&lt;/code&gt; which has 164 public methods, once our library will be released, we should maintain all that amount of code.
It doesn’t worth the trouble, probably because we just wanted to pick a few methods from it.
It’s better to compose an object that hides all that complexity derived from &lt;code&gt;String&lt;/code&gt;, and to expose only the wanted behaviors.&lt;/p&gt;

&lt;p&gt;I was already aware of these issues, but that article was a reminder for fixing my OSS projects.
For this reason I &lt;a href=&quot;https://github.com/lotus/utils/blob/master/lib/lotus/utils/load_paths.rb&quot;&gt;refactored&lt;/a&gt; &lt;code&gt;Lotus::Utils::LoadPaths&lt;/code&gt;.
It used to inherit from &lt;code&gt;Array&lt;/code&gt; (169 methods), but after breaking the inheritance structure, I discovered that I only needed 2 methods.&lt;/p&gt;

&lt;p&gt;However, there are some hidden corners that are worthing to share.&lt;/p&gt;

&lt;h2 id=&quot;information-escape&quot;&gt;Information escape&lt;/h2&gt;

&lt;p&gt;A characteristic that I want for &lt;code&gt;LoadPaths&lt;/code&gt; is the ability to add paths to it.
After the refactoring, for the sake of consistency, I decided to name this method after &lt;code&gt;Array&lt;/code&gt;’s &lt;a href=&quot;http://ruby-doc.org/core-2.1.2/Array.html#method-i-push&quot;&gt;&lt;code&gt;#push&lt;/code&gt;&lt;/a&gt;, and to mimic its behavior.&lt;/p&gt;

&lt;p&gt;The initial implementation of this method was:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;returns self so multiple operations can be performed&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LoadPaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;../..&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;must_include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;..&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;must_include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;../..&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LoadPaths&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When we use this Ruby’s method, the returning value is the array itself, because language’s designers wanted to make chainable calls possible.
If we look at the implementation of our method, the implicit returning value was &lt;code&gt;@paths&lt;/code&gt; (instead of &lt;code&gt;self&lt;/code&gt;), so the subsequent invocations were directly manipulating &lt;code&gt;@paths&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The test above was passing because arrays are referenced by their memory address, so that the changes that happened on the outside (after the accidental escape) were also visible by the wrapping object (&lt;code&gt;LoadPaths&lt;/code&gt;).
Because our main goal is to encapsulate that object, we want to prevent situations like this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;returns self so multiple operations can be performed&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LoadPaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;must_be_same_as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;../..&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;must_include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;must_include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;..&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;must_include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;../..&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LoadPaths&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;dup-and-clone&quot;&gt;Dup and Clone&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;LoadPaths&lt;/code&gt; is used by other &lt;a href=&quot;http://lotusrb.org&quot;&gt;Lotus&lt;/a&gt; libraries, such as &lt;a href=&quot;https://github.com/lotus/view&quot;&gt;&lt;code&gt;Lotus::View&lt;/code&gt;&lt;/a&gt;.
This framework can be &lt;em&gt;“duplicated”&lt;/em&gt; with the goal of ease a &lt;a href=&quot;http://martinfowler.com/articles/microservices.html&quot;&gt;microservices architecture&lt;/a&gt;, where a developer can define &lt;code&gt;MyApp::Web::View&lt;/code&gt; and &lt;code&gt;MyApp::Api::View&lt;/code&gt; as &lt;em&gt;“copies”&lt;/em&gt; of &lt;code&gt;Lotus::View&lt;/code&gt;, that can independently coexist in the same Ruby process.
In other, words the configurations of one &lt;em&gt;“copy”&lt;/em&gt; shouldn’t be propagated to the others.&lt;/p&gt;

&lt;p&gt;Until &lt;code&gt;LoadPaths&lt;/code&gt; was inheriting from &lt;code&gt;Array&lt;/code&gt;, a simple call to &lt;code&gt;#dup&lt;/code&gt; was enough to get a fresh, decoupled copy of the same data.
Now the object is duplicated but not the variables that it encapsulates (&lt;code&gt;@paths&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;paths1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LoadPaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;paths2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paths1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dup&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;paths2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;..&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;paths1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true, which is an unwanted result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The reason of this failure is the same of the information escaping problem: &lt;strong&gt;we’re referencing the same array&lt;/strong&gt;.
Ruby has a special method callback that is designed for cases like this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LoadPaths&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_variable_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:@paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dup&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, when &lt;code&gt;paths1.dup&lt;/code&gt; is called, also the &lt;code&gt;@paths&lt;/code&gt; instance variable will be duplicated and we can safely change &lt;code&gt;paths2&lt;/code&gt; without affecting it.&lt;/p&gt;

&lt;h2 id=&quot;freeze&quot;&gt;Freeze&lt;/h2&gt;

&lt;p&gt;A similar problem arises for &lt;code&gt;#freeze&lt;/code&gt;.
I want &lt;code&gt;Lotus::View&lt;/code&gt; to freeze its configurations after the application is loaded.
This immutability will prevent accidental changes that may lead to software defects.&lt;/p&gt;

&lt;p&gt;When we try to alter the state of a frozen object, Ruby raises a &lt;code&gt;RuntimeError&lt;/code&gt;, but this wasn’t the case of &lt;code&gt;LoadPaths&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LoadPaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeze&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frozen?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; It wasn&amp;#39;t raising RuntimeError&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This had an easy fix:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LoadPaths&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeze&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Composition should be preferred over inheritance, but beware of the unexpected behaviors.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I discovered these problems in a matter of a minutes, because the client code of this object (&lt;code&gt;Lotus::View&lt;/code&gt;) has some integration tests that are asserting all these features, &lt;strong&gt;without assuming anything of the underlying objects&lt;/strong&gt;.
For instance, it checks one by one all the attributes of a configuration after its duplication, without trusting the fact they can safely duplicate themselves.
This double layered testing strategy is fundamental for me while building Lotus.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Rails Is Not Dead</title>
   <link href="http://lucaguidi.com/2014/05/19/rails-is-not-dead.html"/>
   <updated>2014-05-19T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/05/19/rails-is-not-dead</id>
   <content type="html">&lt;p&gt;A few years ago, my lead develop of the time, told me: &lt;em&gt;“Beware of the coupling that you’re introducing in your models”&lt;/em&gt;.
My answer was: &lt;em&gt;“Hey, you don’t know what you’re talking about, this is ActiveRecord”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I was an unexperienced developer fascinated by the innovation that Rails introduced.
After all, my technology was able to get rid of all that configurations, and all that boring stuff from the past.&lt;/p&gt;

&lt;blockquote&gt;
- Patterns?&lt;br /&gt;
- I don&#39;t need them. I have the Holy Grail: MVC.&lt;br /&gt;
- Interfaces?&lt;br /&gt;
- Are you kidding me? This isn&#39;t Java, it&#39;s Ruby!
&lt;/blockquote&gt;

&lt;p&gt;We all have been there.
We were recovering from the consequences of the &lt;em&gt;New Economy&lt;/em&gt; economy bubble burst.
A new wave of technologies was raising: AJAX, Rails, and the Web 2.0.
All was exciting, we felt like we’d learned from the past mistakes.
We were creating a new way to sell software, we needed to be agile, fast and pragmatic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All that thinking about the architecture looked like an unnecessary aftermath of the enterprise legacy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fast forwarding to today, after years spent on several projects, countless hours staring at a monitor, helping startups, banks, broadcasting and highway companies, non-profit organizations, large and small Open Source projects, I can confess one thing: &lt;strong&gt;I was wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Rails has the undeniable credit to have changed the way we do web development.
It has lowered the entry level so much, that even people without a background as programmers have been able to create a successful business.
But this had a cost: technical debt.&lt;/p&gt;

&lt;p&gt;I don’t blame Rails for this, as we shouldn’t blame TDD for writing &lt;em&gt;damaged&lt;/em&gt; code.
We write it, we generate legacy &lt;a href=&quot;https://vimeo.com/1752667&quot;&gt;while writing it&lt;/a&gt;.
We take merits when it’s good, we’re to blame when it isn’t.&lt;/p&gt;

&lt;p&gt;But honestly, I don’t get one thing: why half of the Ruby community is so scared to talk about better code?&lt;/p&gt;

&lt;p&gt;I have my own opinions about software, that now are diverging from Rails.
I’m creating a &lt;a href=&quot;http://lotusrb.org&quot;&gt;web framework&lt;/a&gt; to introduce new ideas and rethink architectures.
I hope to remove the pain points that have been a problem for &lt;strong&gt;my direct experience as a programmer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And you know what? &lt;strong&gt;I might be wrong, but don’t be afraid to talk with me.&lt;/strong&gt;
Don’t you recognize this is diversity too?
I don’t claim to be right like the leaders of this community think they are.
I don’t think that the ideas that I had ten years ago are still valid, like they do.&lt;/p&gt;

&lt;p&gt;The current leaders are behaving like those old politicians who say that global warming is a scam: they get defensive because their world is criticized.
They keep saying to not worry about, that the problem doesn’t exist, but it does.&lt;/p&gt;

&lt;p&gt;Rails is not dead.
Debating about things such as the hexagonal architecture &lt;a href=&quot;http://pivotallabs.com/hexagonal-rails-and-the-ludicrous-terminal-application/&quot;&gt;isn’t an assault to the framework&lt;/a&gt;, but a way to evolve as a community.
If they feel under attack, we have a problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please speak up.&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>We Are All Wrong About Software Design</title>
   <link href="http://lucaguidi.com/2014/04/28/we-are-all-wrong-about-software-design.html"/>
   <updated>2014-04-28T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/04/28/we-are-all-wrong-about-software-design</id>
   <content type="html">&lt;p&gt;We are all wrong. When it comes to talk about opinions this is the way that things work.
Everyone has her or his own beliefs shaped by years of experience in the field, frustrating code, books, successes, etc.
How can all these backgrounds fall into a one unified theory? &lt;strong&gt;They just can’t.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You’ve always been told to pick the right tool for the job.
But what’s the &lt;em&gt;right tool&lt;/em&gt;?
&lt;strong&gt;You decide it&lt;/strong&gt;, according to your practical knowledge.&lt;/p&gt;

&lt;p&gt;I love Ruby because I feel it natural, but other developers hate this language.
I prefer clean code, other people don’t care.
I’m for RSpec and Capybara, other for Test::Unit.
CoffeeScript vs plain JavaScript, ERb vs HAML, Postgres vs MySQL.
Vim or Emacs? Mac or Linux? TDD or not, anyone?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With all these partitions, we’re not freeing people from dogmas, but just creating fans of an opposite opinion.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Relativity can be applied to software design as well.
How many levels of &lt;a href=&quot;http://en.wikipedia.org/wiki/Indirection&quot;&gt;indirection&lt;/a&gt; do I need to get a certain job done?
Well, it depends. It depends on a myriad of &lt;em&gt;good reasons&lt;/em&gt;, but mainly on your judgement.
Which can be superior for you, and fallacious for somebody else.&lt;/p&gt;

&lt;p&gt;We can discuss about tradeoffs, but please stop using your successful product as the certification that you’re right about code.&lt;/p&gt;

&lt;p&gt;I work at &lt;a href=&quot;https://litmus.com&quot;&gt;Litmus&lt;/a&gt;, a profitable company.
If I’d put the following code in a template, do you will find it reasonable just because of my employer?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mysql2&amp;#39;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;database&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%{SELECT * FROM previews&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;    ORDER BY created_at DESC&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;    LIMIT 5}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hey, it works!
Who needs all those fancy abstractions like controllers and ORMs. Who needs frameworks at all!
That constructs are for &lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000018.html&quot;&gt;architecture astronauts&lt;/a&gt;. Get off my lawn!
Look at me, I’m a pragmatist.
I proved this by ruining the multi-millionaire software I work on.&lt;/p&gt;

&lt;p&gt;This isn’t an argument, just nonsense.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 1:&lt;/strong&gt; That last paragraph is &lt;strong&gt;sarcasm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 2:&lt;/strong&gt; No, I won’t use that code for real.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Introducing Lotus::Model</title>
   <link href="http://lucaguidi.com/2014/04/23/introducing-lotus-model.html"/>
   <updated>2014-04-23T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/04/23/introducing-lotus-model</id>
   <content type="html">&lt;p&gt;Almost all the Ruby frameworks for the Model layer mix up business logic with database details.
This kind of architecture leads to &lt;a href=&quot;http://en.wikipedia.org/wiki/God_object&quot;&gt;god classes&lt;/a&gt;, slow build times and to a general &lt;a href=&quot;https://speakerdeck.com/jodosha/a-rails-criticism&quot;&gt;bad design&lt;/a&gt;.
These problems are well known to legacy projects’s maintainers.&lt;/p&gt;

&lt;p&gt;What if we assign these roles to &lt;strong&gt;smaller components&lt;/strong&gt; that are able to collaborate &lt;strong&gt;together&lt;/strong&gt;?
Imagine how life changing would be to &lt;strong&gt;work just with objects&lt;/strong&gt;, without worrying how to persist them.
How easy and fast would be testing them? How small and well defined would be your objects?&lt;/p&gt;

&lt;p&gt;Let me introduce &lt;a href=&quot;https://github.com/lotus/model&quot;&gt;Lotus::Model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It brings a new level of decoupling that is a huge step in that direction.
The framework constitutes a boundary that offers a convenient public API to execute &lt;strong&gt;queries and commands&lt;/strong&gt; to persist and fetch entities.&lt;/p&gt;

&lt;h2 id=&quot;entities&quot;&gt;Entities&lt;/h2&gt;

&lt;p&gt;An entity is the core of an application, where the part of the domain logic is implemented.
It’s a small, cohesive object that express coherent and meaningful behaviors.&lt;/p&gt;

&lt;p&gt;It deals with one and only one responsibility that is pertinent to the domain of the application, without caring about details such as persistence or validations.&lt;/p&gt;

&lt;p&gt;This simplicity of design allows you to focus on behaviors, or message passing if you will, which is the &lt;a href=&quot;http://c2.com/cgi/wiki?AlanKayOnMessaging&quot;&gt;quintessence&lt;/a&gt; of Object Oriented Programming.&lt;/p&gt;

&lt;p&gt;Consider this object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can be &lt;strong&gt;&lt;em&gt;optionally&lt;/em&gt;&lt;/strong&gt; expressed as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/model&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Entity&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, &lt;strong&gt;optionally&lt;/strong&gt;.
Lotus::Model can work with &lt;strong&gt;pure objects&lt;/strong&gt;, as long they implement that small interface above.&lt;/p&gt;

&lt;p&gt;But how the framework knows how to handle these objects?&lt;/p&gt;

&lt;h2 id=&quot;data-mapper&quot;&gt;Data Mapper&lt;/h2&gt;

&lt;p&gt;We use a data mapper for the job.
It’s a persistence mapper that keeps entities unaware of schema details.
Good news are that it’s &lt;strong&gt;database independent&lt;/strong&gt;, it can work with SQL, document, and even with key/value stores.&lt;/p&gt;

&lt;p&gt;The role of a data mapper is to translate database columns into the corresponding attribute of an entity.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/model&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Mapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:articles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For simplicity sake, imagine that the mapper above is used with a SQL database.
We use &lt;code&gt;#collection&lt;/code&gt; to indicate the table that we want to map, &lt;code&gt;#entity&lt;/code&gt; to indicate the kind of object to persist.
In the end, each &lt;code&gt;#attribute&lt;/code&gt; call specifies which Ruby type we want to associate for given column.&lt;/p&gt;

&lt;h2 id=&quot;repositories&quot;&gt;Repositories&lt;/h2&gt;

&lt;p&gt;Once we have in place all the entities and a mapping for them, we can use a repository to talk with a database.&lt;/p&gt;

&lt;p&gt;A repository is an object that mediates between entites and the persistence layer.
It offers a standardized API to query and execute commands on a database.&lt;/p&gt;

&lt;p&gt;A repository is &lt;strong&gt;storage idenpendent&lt;/strong&gt;, all the queries and commands are delegated to the current adapter.&lt;/p&gt;

&lt;p&gt;This architecture has several advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;An application depends on an standard API, instead of low level details (&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;Dependency Inversion principle&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An application depends on a stable API, that doesn’t change if the storage changes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can postpone storage decisions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It confines persistence logic at a low level&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multiple data sources can easily coexist in an application&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/model&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArticleRepository&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repository&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a class includes &lt;code&gt;Lotus::Repository&lt;/code&gt; it will expose &lt;a href=&quot;http://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; methods such as &lt;code&gt;.create&lt;/code&gt;, &lt;code&gt;.update&lt;/code&gt;, &lt;code&gt;.find&lt;/code&gt;.
Aside from that, it offers a powerful &lt;strong&gt;private&lt;/strong&gt; query API.
This decision forces developers to define &lt;strong&gt;intention revealing APIs&lt;/strong&gt;, instead leak storage details outside of a repository.&lt;/p&gt;

&lt;p&gt;Look at the following code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ArticleRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:published_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an example of &lt;em&gt;implicit API&lt;/em&gt;, it means nothing in terms of the behavior of the domain model.
It’s just a chain of method calls. From the caller perspective, it should be aware of the internal query mechanisms.&lt;/p&gt;

&lt;p&gt;There is a better way to write it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/model&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArticleRepository&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repository&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;most_recent_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;author_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:published_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Look at how revealing is the name of that method.
It &lt;em&gt;encapsulates&lt;/em&gt; the implementation details, in favor of a clear and testable API.&lt;/p&gt;

&lt;p&gt;If we change the type of database, the callers of that method will be unaffected.&lt;/p&gt;

&lt;h2 id=&quot;adapters&quot;&gt;Adapters&lt;/h2&gt;

&lt;p&gt;As mentioned above, Lotus::Model is database agnostic.
A repository forwards method calls to its current adapter.
An adapter is a concrete implementation of persistence logic for a specific database.
The framework is shipped with two adapters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;SqlAdapter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;MemoryAdapter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An adapter can be associated to one or multiple repositories and different repositories can have different data sources.
For instance an application can have &lt;code&gt;ArticleRepository&lt;/code&gt; that uses a SQL database and &lt;code&gt;TweetRepository&lt;/code&gt; that talks to a third part JSON service.&lt;/p&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;For the next two months, I will focus on &lt;a href=&quot;http://lotusrb.org&quot;&gt;Lotus&lt;/a&gt; (the gem).
The main goal is to make all the frameworks to work together in a full stack app.
This will require improve the existing libraries and empower them with the missing features.&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;June 23rd&lt;/strong&gt; I will release &lt;strong&gt;Lotus&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Thread Safety With Ruby</title>
   <link href="http://lucaguidi.com/2014/03/27/thread-safety-with-ruby.html"/>
   <updated>2014-03-27T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/03/27/thread-safety-with-ruby</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Moore’s law is over&lt;/strong&gt;.
Modern computation is exploited by running processes on multiple cores.
Ruby has always ignored this trend, and the community didn’t put enough attention on this topic.&lt;/p&gt;

&lt;p&gt;Ruby’s model for concurrency is based on threads.
It was typical approach for object oriented languages, designed in the 90s.
A thread is sequence of instructions that can be scheduled and executed in the context of a process.
Several threads can be running at the same time.&lt;/p&gt;

&lt;p&gt;Ruby’s VM process allocates a memory heap, which is shared and writable by threads.
If incorrectly coordinated, those threads can lead to unexpected behaviors.&lt;/p&gt;

&lt;h2 id=&quot;thread-safety&quot;&gt;Thread Safety&lt;/h2&gt;

&lt;p&gt;We define as &lt;em&gt;thread safe&lt;/em&gt; a code that behaves correctly when accessed by many threads at the time.
Most of the time, the correctness of execution is determined by &lt;strong&gt;the state of the memory that is visible by a routine in a given moment&lt;/strong&gt;.
For instance, a variable appears with a certain value, but in the meantime another thread may have changed it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;before (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;after (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;total: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What happens here? When the threads are starting they see the initial value of &lt;code&gt;x&lt;/code&gt;.
But when each of them, try to add &lt;code&gt;+1&lt;/code&gt;, the value became different as result of the parallel computation.
Without a proper synchronization, the partial state of &lt;code&gt;x&lt;/code&gt; is unpredictable.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;% ruby count.rb
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 0
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 0
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 0
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 3
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 2
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 4
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 5
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 6

after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 10after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 7
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 9

after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 8

total: 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the thread &lt;code&gt;(3)&lt;/code&gt; started, &lt;code&gt;x&lt;/code&gt; was equal to &lt;code&gt;1&lt;/code&gt;, but after adding &lt;code&gt;+1&lt;/code&gt; its value was &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;visibility&quot;&gt;Visibility&lt;/h2&gt;

&lt;p&gt;We met an important issue here: &lt;strong&gt;visibility&lt;/strong&gt;.
If the changes caused by a thread are observable by other threads, they can read the correct value, and then partial state is consistent.&lt;/p&gt;

&lt;p&gt;Until now, we omitted an important aspect: which kind of variables are we referring to?
We are talking about of all that represent a &lt;strong&gt;state of the system&lt;/strong&gt; in a given moment.
Global, class and instance variables require attention, when used in a concurrent context.&lt;/p&gt;

&lt;p&gt;Local variables are exempt from these problems, because they don’t hold a state.&lt;/p&gt;

&lt;p&gt;From this picture, we can infer that &lt;strong&gt;stateless programs are always thread safe&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;atomicity&quot;&gt;Atomicity&lt;/h2&gt;

&lt;p&gt;Yet, stateful systems can be thread-safe.
What’s important isn’t only &lt;strong&gt;what&lt;/strong&gt; changes (&lt;em&gt;visibility&lt;/em&gt;) but &lt;strong&gt;how&lt;/strong&gt; it changes (&lt;em&gt;atomicity&lt;/em&gt;).
If we design write operations in a way that while they’re running, other threads can’t read nor alter the state we’re modifying, that change is thread safe.&lt;/p&gt;

&lt;p&gt;We call these operations &lt;em&gt;atomic&lt;/em&gt;, because their execution appear as indivisible to the rest of the system.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;before (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;after (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;total: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;% ruby count.rb
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 0
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 1
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 2
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 2
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 3
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 3
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 4
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 4
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 5
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 5
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 6
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 6
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 7
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 7
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 8
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 8
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 9
before &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 9
after &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 10

total: 10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;a href=&quot;http://www.ruby-doc.org/core-2.1.1/Mutex.html&quot;&gt;Mutex&lt;/a&gt;, we ensure the atomicity of the &lt;em&gt;add&lt;/em&gt; operation.&lt;/p&gt;

&lt;p&gt;The following example shows &lt;strong&gt;the weakness of a common pattern&lt;/strong&gt; in Ruby applications: lazy loading via &lt;code&gt;||=&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;##&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Counter is thread safe, we use a Mutex to guarantee the atomicity of #increment!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:total&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;initialized&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment!&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;##&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Application isn&amp;#39;t thread safe, because the initialization of Counter&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# happens with a non-atomic operation (`||=`).&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;counter&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;% ruby application.rb
initialized
initialized
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# wrong&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Please note that &lt;code&gt;Counter&lt;/code&gt; is thread safe, but the final application isn’t&lt;/strong&gt;.
We have used &lt;code&gt;||=&lt;/code&gt;, which isn’t atomic. This caused a &lt;a href=&quot;http://en.wikipedia.org/wiki/Race_condition&quot;&gt;&lt;em&gt;race condition&lt;/em&gt;&lt;/a&gt;: two threads have seen &lt;code&gt;@counter&lt;/code&gt; as &lt;code&gt;nil&lt;/code&gt;, and then they have initialized a new instance of it.
&lt;strong&gt;The result of the computation is wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The right way to write that class is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:counter&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As rule of thumb, &lt;strong&gt;avoid mutations after an object is being initialized&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In a nutshell, the limitations of Ruby concurrency model are: data mutability and difficult synchronization.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In an upcoming article, I’ll cover how &lt;a href=&quot;http://lotusrb.org&quot;&gt;Lotus&lt;/a&gt; achieves thread safety.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Introducing Lotus::View</title>
   <link href="http://lucaguidi.com/2014/03/23/introducing-lotus-view.html"/>
   <updated>2014-03-23T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/03/23/introducing-lotus-view</id>
   <content type="html">&lt;p&gt;The missing part of all the Ruby web frameworks is the &lt;strong&gt;distinction between views and templates&lt;/strong&gt;.
A &lt;em&gt;view&lt;/em&gt; is an object that encapsulates the presentation logic of a page.
A &lt;em&gt;template&lt;/em&gt; is a file that defines the semantic and visual elements of a page.
In order to show a result to an user, a template must be &lt;em&gt;rendered&lt;/em&gt; by a view.&lt;/p&gt;

&lt;p&gt;Keeping things separated, helps to declutter templates and models from presentation logic.
Also, since views are objects they are easily testable.
If you ever used &lt;a href=&quot;http://mustache.github.io/&quot;&gt;Mustache&lt;/a&gt;, you are already aware of the advantages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lotus/view&quot;&gt;Lotus::View&lt;/a&gt; is based on these simple concepts.&lt;/p&gt;

&lt;h2 id=&quot;views&quot;&gt;Views&lt;/h2&gt;

&lt;p&gt;Here how a view looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/view&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Articles&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Index&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This syntax follows the Lotus philosophy: include a module that injects a minimal interface.
Before to illustrate how to use a view, I’d like to talk about a few conventions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Templates are searched under &lt;code&gt;Lotus::View.root&lt;/code&gt;, set this value according to your app structure (eg. &lt;code&gt;&quot;app/templates&quot;&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;A view will look for a template with a file name that is composed by its full class name (eg. &lt;code&gt;&quot;articles/index&quot;&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;A template must have two concatenated extensions: one for the format one for the engine (eg. &lt;code&gt;&quot;.html.erb&quot;&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;The framework must be loaded before to render for the first time: &lt;code&gt;Lotus::View.load!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Suppose that we want to render a list of &lt;code&gt;articles&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/view&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Articles&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Index&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;app/templates&amp;#39;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load!&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;articles/index.html.erb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArticleRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Articles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this code is working fine, it’s inefficient and verbose, because we are loading a template from the filesystem for each rendering attempt.
Also, this is strictly related to the HTML format, what if we want to manage other formats?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/view&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Articles&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Index&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Index&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:atom&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;app/templates&amp;#39;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load!&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArticleRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Articles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; This will use Articles::Index&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#    and &amp;quot;articles/index.html.erb&amp;quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Articles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; This will use Articles::AtomIndex&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#    and &amp;quot;articles/index.atom.erb&amp;quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Articles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; This will raise a Lotus::View::MissingTemplateError&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First of all, we are preloading templates according to the above conventions, they are &lt;strong&gt;cached internally&lt;/strong&gt; for future use.
This is a huge performance improvement.&lt;/p&gt;

&lt;p&gt;A view is able to understand the given context and decide if render by itself or delegate to a subclass.&lt;/p&gt;

&lt;p&gt;All the objects passed in the context are called locals, they are available both in the view and in the template:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/view&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Articles&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authors&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= article.title %&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= article.content %&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All the methods defined in the view are accessible in the template:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= authors %&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;custom-rendering&quot;&gt;Custom rendering&lt;/h2&gt;

&lt;p&gt;Since a view is an object, you can override &lt;code&gt;#render&lt;/code&gt; and provide your own rendering policy:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/view&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Articles&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;View&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ArticleSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Articles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; This will render from ArticleSerializer,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#    without the need of a template&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-features&quot;&gt;Other features&lt;/h2&gt;

&lt;p&gt;Lotus::View supports countless rendering engines, layouts, partials and it has lightweight presenters.
They are explained in detail in the &lt;a href=&quot;https://github.com/lotus/view#lotusview&quot;&gt;README&lt;/a&gt; and the &lt;a href=&quot;http://rdoc.info/gems/lotus-view&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;As part of the &lt;a href=&quot;http://lotusrb.org&quot;&gt;Lotus&lt;/a&gt; roadmap, I will open source a framework each month.
On &lt;strong&gt;April 23rd&lt;/strong&gt; I will release &lt;strong&gt;Lotus::Model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Redis Scripting with MRuby</title>
   <link href="http://lucaguidi.com/2014/02/26/redis-scripting-with-mruby-pt1.html"/>
   <updated>2014-02-26T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/02/26/redis-scripting-with-mruby-pt1</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.mruby.org&quot;&gt;MRuby&lt;/a&gt; is a lightweight Ruby.
It was created by Matz with the purpose of having an embeddable version of the language.
Even if it just reached the version 1.0, the hype around MRuby wasn’t high.
However, there are already projects that are targeting &lt;a href=&quot;https://github.com/matsumoto-r/ngx_mruby&quot;&gt;Nginx&lt;/a&gt;, &lt;a href=&quot;https://github.com/mattn/go-mruby&quot;&gt;Go&lt;/a&gt;, &lt;a href=&quot;http://mobiruby.org&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;https://github.com/mattn/mruby-v8&quot;&gt;V8&lt;/a&gt;, and even &lt;a href=&quot;https://github.com/kyab/mruby-arduino&quot;&gt;Arduino&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The direct competitor in this huge market is &lt;a href=&quot;http://www.lua.org&quot;&gt;Lua&lt;/a&gt;: a lightweight scripting language.
Since the version 2.6.0 Redis introduced &lt;a href=&quot;http://redis.io/commands#scripting&quot;&gt;scripting&lt;/a&gt; capabilities with Lua.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# redis-cli&lt;/span&gt;
&amp;gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;return 5&amp;quot;&lt;/span&gt; 0
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;integer&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Today is the 5th Redis birthday&lt;/strong&gt;, and I’d like celebrate this event by embedding my favorite language.&lt;/p&gt;

&lt;h2 id=&quot;hello-mruby&quot;&gt;Hello, MRuby&lt;/h2&gt;

&lt;p&gt;MRuby is shipped with an interpreter (&lt;code&gt;mruby&lt;/code&gt;) to execute the code via a VM.
This usage is equivalent to the well known Ruby interpreter &lt;code&gt;ruby&lt;/code&gt;.
MRuby can also generate a bytecode from a script, via the &lt;code&gt;mrbc&lt;/code&gt; bin.&lt;/p&gt;

&lt;p&gt;What’s important for our purpose are the C bindings. Let’s write an &lt;em&gt;Hello World&lt;/em&gt; program.&lt;/p&gt;

&lt;p&gt;We need a *NIX OS, gcc and bison.
I’ve extracted the MRuby code into &lt;code&gt;~/Code/mruby&lt;/code&gt; and built it with &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;mruby.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;mruby/compile.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrb_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p &amp;#39;hello world!&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;mrb_load_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The compiler needs to know where are the headers and the libs:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gcc -I/Users/luca/Code/mruby/include hello_world.c &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  /Users/luca/Code/mruby/build/host/lib/libmruby.a &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -lm -o hello_world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a really basic example, we don’t have any control on the context where this code is executed.
We can parse it and wrap into a &lt;a href=&quot;http://www.ruby-doc.org/core-2.1.1/Proc.html&quot;&gt;Proc&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;mruby.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;mruby/proc.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrb_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrbc_context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrb_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_parser_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RProc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1 + 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cxt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrbc_context_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_parse_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_generate_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrb_pool_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_top_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrb_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;mrbc_context_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;hello-redis&quot;&gt;Hello, Redis&lt;/h2&gt;

&lt;p&gt;As first thing we need to make Redis dependend on MRuby libraries.
We extract the language source code under &lt;code&gt;deps/mruby&lt;/code&gt; and then we hook inside the &lt;code&gt;deps/Makefile&lt;/code&gt; mechanisms:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mruby: .make-prerequisites
       @printf &lt;span class=&quot;s1&quot;&gt;&amp;#39;%b %b\n&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;MAKECOLOR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;MAKE&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ENDCOLOR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;BINCOLOR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ENDCOLOR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;mruby &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;MAKE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;muted code-caption&quot;&gt;see the &lt;a href=&quot;https://github.com/jodosha/redis/commit/c94263ee9bf129c3fce5d753554e170a94e0e7c0&quot;&gt;commit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During the startup, Redis initializes its features.
We add our own &lt;code&gt;mrScriptingInit()&lt;/code&gt;, where we initialize the interpreter and assign to &lt;code&gt;server.mrb&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# src/mruby-scripting.c&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mrScriptingInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrb_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;muted code-caption&quot;&gt;see the &lt;a href=&quot;https://github.com/jodosha/redis/commit/61a8f4472e16edbfc0d53999e3ee3193a569d51c&quot;&gt;commit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we can add another command &lt;code&gt;REVAL&lt;/code&gt; with the same syntax of &lt;code&gt;EVAL&lt;/code&gt;, but in our case MRuby will be in charge of execute it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# src/redis.c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;reval&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrEvalCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zunionInterGetKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That &lt;code&gt;mrEvalCommand&lt;/code&gt; function will be responsible to handle that command.
It’s similar to the &lt;em&gt;Hello World&lt;/em&gt; above, the only difference is that the code is passed as argument to the redis client (&lt;code&gt;c-&amp;gt;argv[1]-&amp;gt;ptr&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# src/mruby-scripting.c&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mrEvalCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrb_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_parser_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RProc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrbc_context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrb_value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;cxt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrbc_context_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_parse_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_generate_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrb_pool_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb_top_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mrAddReply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;mrbc_context_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mrb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cxt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p class=&quot;muted code-caption&quot;&gt;see the &lt;a href=&quot;https://github.com/jodosha/redis/commit/82d67f1d83b42f3b276ebe17443a82496df05803&quot;&gt;commit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can compile the server and start it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; src/redis-server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From another shell, start the CLI.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;src/redis-cli
&amp;gt; reval &lt;span class=&quot;s2&quot;&gt;&amp;quot;2 + 3&amp;quot;&lt;/span&gt; 0
&lt;span class=&quot;s2&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was the first part of this implementation.
In a future article, I’ll cover how to access Redis data within the MRuby context.&lt;/p&gt;

&lt;p&gt;For the time being, feel free to play with my &lt;a href=&quot;https://github.com/jodosha/redis/tree/mruby-scripting&quot;&gt;fork&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Introducing Lotus::Controller</title>
   <link href="http://lucaguidi.com/2014/02/23/introducing-lotus-controller.html"/>
   <updated>2014-02-23T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/02/23/introducing-lotus-controller</id>
   <content type="html">&lt;p&gt;Lotus development is going well.
The experiment of open source a framework per month is &lt;strong&gt;sustainable&lt;/strong&gt;.
I have the time to cleanup the code, write a good documentation and deliver great solutions.&lt;/p&gt;

&lt;p&gt;This month, I’m proud to announce &lt;a href=&quot;https://github.com/lotus/controller&quot;&gt;Lotus::Controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s a &lt;strong&gt;small but powerful&lt;/strong&gt; and &lt;strong&gt;fast&lt;/strong&gt; framework.
It works standalone or with &lt;a href=&quot;https://github.com/lotus/router&quot;&gt;Lotus::Router&lt;/a&gt; and it implements the &lt;a href=&quot;http://rack.github.io&quot;&gt;Rack&lt;/a&gt; protocol.&lt;/p&gt;

&lt;h2 id=&quot;actions&quot;&gt;Actions&lt;/h2&gt;

&lt;p&gt;The core of Lotus::Controller are the actions.
&lt;strong&gt;An action is an HTTP endpoint.&lt;/strong&gt;
This is the biggest difference with other frameworks where they use huge classes as controllers.
Think of Rails, where a single controller is responsible of many actions and holds too much informations.
Lotus is simple: &lt;strong&gt;one class per action&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/controller&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this design I wanted to solve a some annoying problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An action is an object&lt;/strong&gt;, whose ownership belongs to its author.
She or he, should be free to build their own hierarchy between classes.
Lotus offers Ruby modules to be included instead of superclasses to be inherited.&lt;/p&gt;

&lt;p&gt;Smaller classes are &lt;a href=&quot;http://en.wikipedia.org/wiki/Cohesion_(computer_science)#High_cohesion&quot;&gt;high cohesive&lt;/a&gt; components, where the instance variables have a strong relationship between them.
This level of isolation &lt;strong&gt;prevents accidental data leaks&lt;/strong&gt; and &lt;strong&gt;less moving parts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A tiny API of one method makes &lt;strong&gt;straightforward&lt;/strong&gt; the usage of Lotus::Controller.
Its argument (&lt;code&gt;params&lt;/code&gt;), makes it easy to integrate with existing Rack applications.
It returns automatically a serialized &lt;a href=&quot;http://rack.rubyforge.org/doc/SPEC.html&quot;&gt;Rack response&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A side benefit of this architecture is to take over the &lt;strong&gt;control of instantiate an action&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/controller&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MemoryArticleRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the example above we define &lt;code&gt;Article&lt;/code&gt; as the default repository, but during the testing we’re using a &lt;strong&gt;stub&lt;/strong&gt;.
In this way we can avoid hairy setup steps for our tests, and &lt;strong&gt;avoid to hit the database&lt;/strong&gt;.
Also notice that we’re not simulating HTTP requests, but only calling the method that we want to examine.
&lt;strong&gt;Imagine how fast can be a unit test like this.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;exposures&quot;&gt;Exposures&lt;/h2&gt;

&lt;p&gt;Instance variables represent the internal state of an object.
From an outside perspective we don’t know which is that state.
The simplest and recommended way to get this information is to ask for it.
This mechanism is called &lt;a href=&quot;http://en.wikipedia.org/wiki/Encapsulation_(object-oriented_programming)&quot;&gt;Encapsulation&lt;/a&gt;.
It’s one of the pillars of Object Oriented Programming.&lt;/p&gt;

&lt;p&gt;The instance variables of an action are necessary for returning the body of an HTTP response.
While we’re creating that result from the inside of an action, we can access these informations directly.
External objects can retrieve them with getters. These getters are defined with a simple DSL: &lt;code&gt;#expose&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/controller&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:article&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exposures&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; { article: &amp;lt;Article:0x007f965c1d0318 @id=23&amp;gt; }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;no-rendering-please&quot;&gt;No Rendering, Please&lt;/h2&gt;

&lt;p&gt;Lotus::Controller helps to build pure HTTP endpoints, &lt;strong&gt;rendering belongs to other layers of MVC&lt;/strong&gt;.
It provides a private setter for the body of the response.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/controller&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Views and presenters can manipulate the body of the returned response.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/controller&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Show&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Action&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;expose&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:article&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArticlePresenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-features&quot;&gt;Other features&lt;/h2&gt;

&lt;p&gt;Lotus::Controller offers a set of powerful features: callbacks, automatic management for exceptions and mime types.
It also supports redirects, cookies and sessions.
They are explained in detail in the &lt;a href=&quot;https://github.com/lotus/controller#lotuscontroller&quot;&gt;README&lt;/a&gt; and the &lt;a href=&quot;http://rdoc.info/gems/lotus-controller&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;On &lt;strong&gt;March 23rd&lt;/strong&gt; I will release &lt;strong&gt;Lotus::View&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Building Sinatra with Lotus</title>
   <link href="http://lucaguidi.com/2014/01/28/building-sinatra-with-lotus.html"/>
   <updated>2014-01-28T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/01/28/building-sinatra-with-lotus</id>
   <content type="html">&lt;p&gt;The beauty of &lt;a href=&quot;http://lotusrb.org&quot;&gt;Lotus&lt;/a&gt; is the composition of its frameworks. Each of them is well designed to achieve one and only one goal.
The main advantage of this architecture is that delevopers can easily use and reuse those frameworks in countless ways.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2014/01/23/introducing-lotus-router.html&quot;&gt;Lotus::Router&lt;/a&gt; accepts anonymous functions as endpoints.
This feature can be used to build &lt;a href=&quot;http://sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt; with it.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial setup&lt;/h2&gt;

&lt;p&gt;We need to setup a &lt;code&gt;Gemfile&lt;/code&gt; with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus-router&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As second step, we create an &lt;em&gt;Hello World&lt;/em&gt; application with Lotus::Router (run with &lt;code&gt;rackup application.rb&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bundler/setup&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/router&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_app&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;return-value-of-the-block-as-response-body&quot;&gt;Return value of the block as response body&lt;/h2&gt;

&lt;p&gt;You may have noticed a discrepancy between the typical Sinatra usage and the example above: &lt;strong&gt;the framework sets the return value of that endpoint as the body of the response&lt;/strong&gt;, here we’re returning a serialized Rack response.&lt;/p&gt;

&lt;p&gt;Internally, Lotus::Router uses &lt;a href=&quot;http://rdoc.info/gems/lotus-router/Lotus/Routing/Endpoint&quot;&gt;Lotus::Routing::Endpoint&lt;/a&gt; to wrap application’s endpoints.
They can be any type of object that respond to &lt;code&gt;#call&lt;/code&gt;, and it’s up to us to return a &lt;code&gt;Rack::Response&lt;/code&gt;.
In our case, we have just a string, if we inherit from that class, we can wrap the body in a proper response:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Routing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next step is to use this endpoint.&lt;/p&gt;

&lt;p&gt;Lotus::Router uses a &lt;strong&gt;specific set of rules&lt;/strong&gt; to understand which endpoint needs to be associated with a given path.
For instance, when you write &lt;code&gt;get &#39;/dashboard&#39;, to: &#39;dashboard#index&#39;&lt;/code&gt;, that &lt;code&gt;:to&lt;/code&gt; option is processed and the router will look for a &lt;code&gt;DashboardController::Index&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lotus/router#duck-typed-endpoints&quot;&gt;Those&lt;/a&gt; &lt;a href=&quot;http://rdoc.info/gems/lotus-router/Lotus/Routing/EndpointResolver#resolve-instance_method&quot;&gt;conventions&lt;/a&gt; are implemented by &lt;a href=&quot;http://rdoc.info/gems/lotus-router/Lotus/Routing/EndpointResolver&quot;&gt;Lotus::Routing::EndpointResolver&lt;/a&gt;, which is &lt;a href=&quot;https://github.com/lotus/router/blob/master/lib/lotus/routing/http_router.rb#L43&quot;&gt;used as default resolver&lt;/a&gt;.
If you want to use &lt;strong&gt;a different policy&lt;/strong&gt;, or &lt;strong&gt;customize&lt;/strong&gt; the way it works, pass your own resolver to the router constructor (&lt;code&gt;:resolver&lt;/code&gt; option).
We want to use the defaults, and only specify to usa of our custom endpoint.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bundler/setup&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/router&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Routing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Routing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EndpointResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_app&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;request-params&quot;&gt;Request params&lt;/h2&gt;

&lt;p&gt;Now that we have mimicked the simplest Sinatra usage, let’s have a look at the next example: request params.
&lt;code&gt;Endpoint&lt;/code&gt; is agnostic, it’s part of an HTTP router, that’s why it passes the complete Rack &lt;code&gt;env&lt;/code&gt; to the real endpoint that it wraps.
Instead, we want to use only the tokens coming from the URL. This is really simple to do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bundler/setup&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus/router&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Endpoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Routing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;router.params&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Routing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EndpointResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/greet/:planet&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello from the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:planet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_app&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-step-further&quot;&gt;A step further&lt;/h2&gt;

&lt;p&gt;What we did until now it’s great but noisy.
We want to extract the boilerplate code into a separated file.
I’ve prepared a &lt;a href=&quot;http://jeffkreeftmeijer.com/2011/microgems-five-minute-rubygems/&quot;&gt;microgem&lt;/a&gt; to be used with our &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus-sinatra&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://gist.github.com/8665228.git&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can leave that beautiful DSL alone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bundler/setup&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus-sinatra&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/greet/:planet&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello from the &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:planet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This example confirms how valuable is the separation between Lotus frameworks and that Dependency Injection &lt;strong&gt;is&lt;/strong&gt; a &lt;a href=&quot;http://solnic.eu/2013/12/17/the-world-needs-another-post-about-dependency-injection-in-ruby.html&quot;&gt;virtue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Introducing Lotus::Router</title>
   <link href="http://lucaguidi.com/2014/01/23/introducing-lotus-router.html"/>
   <updated>2014-01-23T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/01/23/introducing-lotus-router</id>
   <content type="html">&lt;p&gt;For me, the first step in the long path of &lt;a href=&quot;/2014/01/01/announcing-lotus.html&quot;&gt;building a web framework&lt;/a&gt; was an HTTP router.
By understanding requests coming from an user, it pays back with an immediate gratification: start it, open a browser and see a result.&lt;/p&gt;

&lt;p&gt;My hope was to embark on a short journey, and reuse as much as possible existing libraries.
But I soon discovered that the biggest problem of Ruby web frameworks is reusability of components.
Rails uses &lt;a href=&quot;https://github.com/rails/journey&quot;&gt;journey&lt;/a&gt;, which is coupled with ActionPack code base.
Sinatra has its own hardcoded routing system.
Plain Rack apps require the developer to fiddle with low level details of &lt;code&gt;env&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All those solutions work great for the narrowed problem they are solving: HTTP routing for a given system.
What if I wanted to build an high-level router, not just for a specific framework, but &lt;strong&gt;for all the Ruby web apps&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;That’s where the idea of &lt;strong&gt;Lotus::Router&lt;/strong&gt; came in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lotus::Router&lt;/strong&gt; is an HTTP Router for Ruby, it’s fast, lightweight and compatible with the Rack protocol.&lt;/p&gt;

&lt;p&gt;It’s designed to work as a standalone software or within a context of a &lt;a href=&quot;http://lotusrb.org&quot;&gt;Lotus&lt;/a&gt; application, and provides features such as: fixed and partial URL matching, redirect, namespaces, named routes and RESTful resource(s).&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;During the design process of this software I had in mind two main goals: simplicity and employ well known ideas.
Ease of use is crucial to software adoption, but also meet a developer’s acquaintance with what he (or her) already utilize is critical as well.
This is a pattern that you will notice often during the discover of Lotus: &lt;strong&gt;on one hand, it leverages on well established concepts, on the other one, it adds value by bringing fresh ideas.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lotus-router&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;/hello&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;/dashboard&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;dashboard#index&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;/middleware&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RackMiddleware&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;/rack-app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RackApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/legacy&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/users&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Index&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;users&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For those who are unfamiliar with this (I hope none of you), let me explain the basic usage.&lt;/p&gt;

&lt;p&gt;We have an HTTP verb as method, &lt;code&gt;#get&lt;/code&gt; in the example.
This method is invoked with a string which is the relative URL to match (&lt;code&gt;&quot;/hello&quot;&lt;/code&gt;), and with an endpoint (&lt;code&gt;to: #...&lt;/code&gt;) that is where a request will be routed to.
Thanks to the Ruby’s weak typing nature, an endpoint can be a proc, a string, a class or an object. According to simple conventions, Lotus::Router is able resolve that option in a Rack endpoint, which must be provided by your application.&lt;/p&gt;

&lt;p&gt;I would like you to notice that the DSL is implemented with a block accepted by the constructor, and it uses public methods of the object, there is no magic here.
I could write the previous example like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another aspect that is important is that we obtain a &lt;code&gt;router&lt;/code&gt; object.
Instead of being relegated to a secondary role and hidden behind the opaque mechanisms of other frameworks, this is the first time that a router it’s promoted to a first class citizenship.
This is a pillar of the Lotus architecture: &lt;strong&gt;let components to emerge&lt;/strong&gt;. In this way developers can be better understand, introspect and &lt;strong&gt;test&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Lotus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;host.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sessions#new&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:login&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;quot;/login&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;quot;https://host.com/login&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Imagine how much it would be easy &amp;amp;dash; with a system like this &amp;amp;dash; to implement routing helpers.&lt;/p&gt;

&lt;p&gt;This is only a taste of what &lt;strong&gt;Lotus::Router&lt;/strong&gt; can do: please have a look at the &lt;a href=&quot;https://github.com/lotus/router#lotusrouter&quot;&gt;README&lt;/a&gt; and the &lt;a href=&quot;http://rdoc.info/gems/lotus-router&quot;&gt;API doc&lt;/a&gt;, for a detailed explanation.&lt;/p&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;The experiment of releasing a &lt;a href=&quot;http://lotusrb.org&quot;&gt;Lotus&lt;/a&gt; component &lt;strong&gt;on the 23rd of every month&lt;/strong&gt; is going well. On February will be the turn of &lt;strong&gt;Lotus::Controller&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To stay updated with the latest releases, to receive code examples, implementation details and announcements, please consider to subscribe to the Lotus &lt;a href=&quot;http://lotusrb.org/mailing-list&quot; target=&quot;_blank&quot; title=&quot;Lotus mailing list&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;!-- Begin MailChimp Signup Form --&gt;
&lt;link href=&quot;//cdn-images.mailchimp.com/embedcode/slim-081711.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;

&lt;div id=&quot;mc_embed_signup&quot;&gt;
  &lt;form action=&quot;http://lotusrb.us3.list-manage1.com/subscribe/post?u=dcbeefa4ba1ea9ae043857005&amp;amp;id=fb3873a90f&quot; method=&quot;post&quot; id=&quot;mc-embedded-subscribe-form&quot; name=&quot;mc-embedded-subscribe-form&quot; class=&quot;validate&quot; target=&quot;_blank&quot; novalidate=&quot;novalidate&quot;&gt;
    &lt;label for=&quot;mce-EMAIL&quot;&gt;Subscribe to the Lotus mailing list&lt;/label&gt;
    &lt;input type=&quot;email&quot; value=&quot;&quot; name=&quot;EMAIL&quot; class=&quot;email&quot; id=&quot;mce-EMAIL&quot; placeholder=&quot;email address&quot; required=&quot;required&quot; /&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style=&quot;position: absolute; left: -5000px;&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;b_dcbeefa4ba1ea9ae043857005_fb3873a90f&quot; value=&quot;&quot; /&gt;&lt;/div&gt;
    &lt;div class=&quot;clear&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Subscribe&quot; name=&quot;subscribe&quot; id=&quot;mc-embedded-subscribe&quot; class=&quot;button&quot; /&gt;&lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;!--End mc_embed_signup--&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Announcing Lotus</title>
   <link href="http://lucaguidi.com/2014/01/01/announcing-lotus.html"/>
   <updated>2014-01-01T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2014/01/01/announcing-lotus</id>
   <content type="html">&lt;p&gt;I’m pleased to announce Lotus: the Open Source project I’ve conceived, hacked and built during the last year.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lotus is a full stack web framework for Ruby&lt;/strong&gt;, built with lightness, performances and testability in mind.
It aims to bring back Object Oriented Programming to web development, leveraging on stable APIs, a minimal DSL, and plain objects.&lt;/p&gt;

&lt;h2 id=&quot;standalone-frameworks&quot;&gt;Standalone frameworks&lt;/h2&gt;

&lt;p&gt;It’s composed by &lt;strong&gt;standalone frameworks&lt;/strong&gt; (controllers, views, etc..), each one is shipped as an independent gem, in order to remark the separation of concerns.
They can be used with any &lt;a href=&quot;http://rack.github.io&quot;&gt;Rack&lt;/a&gt; compatible application for a specific need: for instance, &lt;a href=&quot;http://lotusrb.org/router&quot;&gt;Lotus::Router&lt;/a&gt; can be used to dispatch HTTP requests for a pool of &lt;a href=&quot;http://www.sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt; applications.&lt;/p&gt;

&lt;h2 id=&quot;full-stack-application&quot;&gt;Full stack application&lt;/h2&gt;

&lt;p&gt;The other way to use Lotus is to build a full stack application with it, like &lt;a href=&quot;http://rubyonrails.org&quot;&gt;Rails&lt;/a&gt; does.
The Lotus gem is designed to enhance those frameworks’ features with a few specific conventions.&lt;/p&gt;

&lt;h2 id=&quot;philosophy&quot;&gt;Philosophy&lt;/h2&gt;

&lt;p&gt;Lotus is based on simplicity, less DSLs, few conventions, more objects, zero monkey-patching of the core language and standard lib, separation of concerns for MVC layers.
It suggests patterns, rather than imposing. It leaves all the freedom to developers to build their own architecture, choose the inheritance structure.
It simplifies testability, and encourages single, well defined responsibilities between classes.&lt;/p&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;Lotus is a complex software, it needs to be completed, and to get feedback in order to became production ready.
Some of its frameworks already have reached a certain degree of maturity, other still needs to be crafted as a gem yet.
A single release day would be hard to meet as expectation, so I would like to suggest an experiment: to open source a component &lt;strong&gt;on the 23rd of every month&lt;/strong&gt;, starting from January with &lt;a href=&quot;http://lotusrb.org/utils&quot;&gt;Lotus::Utils&lt;/a&gt; and &lt;a href=&quot;http://lotusrb.org/router&quot;&gt;Lotus::Router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy new year!&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>On Happiness</title>
   <link href="http://lucaguidi.com/2013/12/17/on-happiness.html"/>
   <updated>2013-12-17T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2013/12/17/on-happiness</id>
   <content type="html">&lt;p&gt;As a naive younger man, I have always been disappointed by how many year resolutions have missed in the past.
Mostly because they are a failure by design: the &lt;em&gt;wishful self&lt;/em&gt; is delighted to dictate the new &lt;em&gt;agenda of change&lt;/em&gt;, where all the lazyness, tiredness, and unforeseen accidents will magically disappear to leave room to a bright, joyful and productive future.
This will never happen.&lt;/p&gt;

&lt;h2 id=&quot;what-really-works-is-to-plan-nothing&quot;&gt;What really works is to plan nothing&lt;/h2&gt;

&lt;p&gt;If you aim to write more, just find the time and do it.
Don’t plan, do it.
Todo lists were invented to sit and watch us with disapproval, they always generate a sensation of unfulfillment, we are always inadequate and behind the goal.
And if we’re still struggling, we probably have chosen the wrong desire.
Better admit the failure, turn it down, than blindly follow somebody else’s dream.&lt;/p&gt;

&lt;h2 id=&quot;dont-expect-anything-be-grateful-instead&quot;&gt;Don’t expect anything, be grateful, instead&lt;/h2&gt;

&lt;p&gt;Be grateful when an achievement is met, be grateful for your life, for your family.
Focus on what you already have, not on what you don’t.
What is part of your existence right now, is the ground for happiness, the solid foundation to build a blissful future.
When something get lost, like an habit, don’t despair, be thankful to have had that thing in your life, if it’s the case, it will came back.&lt;/p&gt;

&lt;h2 id=&quot;strive-for-long-term-happiness&quot;&gt;Strive for long term happiness&lt;/h2&gt;

&lt;p&gt;I admit that daily routine can be overwhelming, sometimes depressing.
Shit happens, and it will forever.
Life is like that, and for sure, we easily forget moments, but what we keep are memories.
Be sure to create them.
That’s why I love photography, it’s the perfect incentive to create memories.
Be also sure that your memories will be sunny,
it’s what really matters when look back in the past and answer to the ultimate question: &lt;em&gt;was my life happy?&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Introducing Redis Store</title>
   <link href="http://lucaguidi.com/2012/06/18/introducing-redis-store.html"/>
   <updated>2012-06-18T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2012/06/18/introducing-redis-store</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;[ I wrote this post for Redis ToGo, you can find the original article &lt;a href=&quot;http://blog.togo.io/introducing/redis-store/&quot;&gt;here&lt;/a&gt; and the related discussion on &lt;a href=&quot;http://news.ycombinator.com/item?id=4124246&quot;&gt;Hacker News&lt;/a&gt;. ]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redis Store aims to be a toolkit for your Ruby applications, it natively supports sharding, master/slave replication, marshalling, timeouts and namespaces. Plus, it&amp;#8217;s really easy to use with the most popular frameworks, such as Ruby on Rails.&lt;/p&gt;

&lt;p&gt;If you love modularity, you will love Redis Store too: under the hood it just activates, at runtime, the best set of low level features requested by the above software layers. It&amp;#8217;s delivered as a set of gems, one for each targeted framework, with a common background that&amp;#8217;s the redis-store gem itself. This decision helped me a lot to deal with different versions of Ruby, several frameworks, and versions.&lt;/p&gt;

&lt;h2&gt;How to use it&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s say we want to use Redis Store in our Rails project. First of all we need to add an entry in our &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redis-rails&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redis-rack-cache&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# optional&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we have many options:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;## Cache Store&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# config/environments/production.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:redis_store&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## Session Store&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# config/initializers/session_store.rb&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MyApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_store&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:redis_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;redis://:secret@192.168.6.23:6379/0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redis://:secret@192.168.6.99:6379/1&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## HTTP Cache&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# config.ru&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rack&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rack/cache&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redis-rack-cache&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;metastore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;&amp;#39;redis://localhost:6379/0/metastore&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;entitystore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redis://localhost:6380/0/entitystore&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it&amp;#8217;s pretty easy to plug in, but let&amp;#8217;s investigate how to manage our configuration. The first case is self-explanatory, we&amp;#8217;re telling &lt;code&gt;ActiveSupport&lt;/code&gt; to load our Redis backed store. Remember that, &lt;em&gt;au contraire&lt;/em&gt; of Redis, which only supports strings, we can dump full objects here.&lt;/p&gt;

&lt;p&gt;The second example is a little bit more complicated. First of all, we are employing a cluster of servers. As mentioned before, Redis Store supports sharding, that means the HTTP sessions will be transparently split across the two hosts. For each node we are specififying, respectively: protocol, password, ip, port and the Redis database.&lt;/p&gt;

&lt;p&gt;The last one, instead describes the setup for the Rails recently added &lt;code&gt;Rack::Cache&lt;/code&gt;. This is a Ruby implementation of an HTTP cache proxy (like Squid or Varnish), which helps to drastically improve response times, by storing the full contents for a given url. It has two components: the metastore, used mainly to check the existence of an entry, and the entitystore, that&amp;#8217;s the repository itself. You&amp;#8217;ve probably noticed another parameter in the configuration: it&amp;#8217;s the namespace, all the keys will be prefixed with something like &lt;code&gt;&amp;lt;namespace&amp;gt;:&amp;lt;key&amp;gt;&lt;/code&gt;. One last note: since we are storing just plain text, the mashalling module isn&amp;#8217;t activated.&lt;/p&gt;

&lt;p&gt;This is just a small portion of what Redis Store can do, it also supports &lt;code&gt;Rack&lt;/code&gt;, &lt;code&gt;Sinatra&lt;/code&gt; and &lt;code&gt;I18n&lt;/code&gt; out of the box.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I strongly believe that Redis is must-have in your environment, it&amp;#8217;s fast, flexible enough to be used as database, cache, pub/sub. That being said, Redis Store can be a great tool for scale your applications, but everything has a cost: fine tuning. Again, it-just-works, but as Rails itself, to step up, you&amp;#8217;ll probably find out to experiment a little bit with the Redis configuration, in order to find the right threshold between performances, scalability and memory consumption.&lt;/p&gt;

&lt;p&gt;If you want to give Redis store a try, please check it out on &lt;a href=&quot;https://github.com/jodosha/redis-store&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Lean Rails App Setup</title>
   <link href="http://lucaguidi.com/2012/02/27/lean-rails-app-setup.html"/>
   <updated>2012-02-27T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2012/02/27/lean-rails-app-setup</id>
   <content type="html">&lt;p&gt;I&amp;#8217;m currently working as a consultant for an UN agency (&lt;a href=&quot;http://www.ifad.org&quot;&gt;IFAD&lt;/a&gt;) and we have a portfolio of &lt;strong&gt;~15 Rails&lt;/strong&gt; apps, developed in the last four years. The environment is heterogeneous and an half dozen of these projects are interfacing with legacy software and they are legacy themselves. As counterpart, the new apps we are developing are running on the latest bleeding edge technologies (Ruby 1.9.3, Rails 3.2, MongoDB, Redis, WebSockets etc..).&lt;/p&gt;

&lt;p&gt;When I joined the team in last September, I had big problems to deal with all this amount of informations and to clone projects from &lt;a href=&quot;https://github.com/ifad&quot;&gt;GitHub&lt;/a&gt; then make them running on my dev machine. The most common issue is the missing and/or outdated documentation. Developers are lazy people and, in general, they just want to code. Documentation, UI/UX reviews are just an example of what they tend to avoid.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;post-git-clone&lt;/em&gt; syndrome became really frustrating for each project I needed to work on, so now I aim to document and create a single Rake task for setup.&lt;/p&gt;

&lt;p&gt;Since we have several persistence options, to run all these databases as &lt;em&gt;init.d&lt;/em&gt; services would be overkilling for my MacBook. So I went for the &lt;em&gt;all-turned-off-by-default&lt;/em&gt; strategy and run only the processes that I actually need for a code session. I&amp;#8217;m a big fan of &lt;a href=&quot;http://ddollar.github.com/foreman/&quot;&gt;Foreman&lt;/a&gt;, and it perfectly fits this need. Plus I don&amp;#8217;t have to remind which is the database(s) needed for that specific project or if it needs a queue, everything is ready with just &lt;strong&gt;foreman start&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In our team we almost all use Mac (with &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt;) as setup, but since a Foreman&amp;#8217;s &lt;em&gt;Procfile&lt;/em&gt; is too much coupled with the current machine is running on, I create a &lt;strong&gt;Procfile.example&lt;/strong&gt; in each project and let my colleagues to customize their own configuration, according their machine, or completely skip it and use their own workflow. Remember, the goal isn&amp;#8217;t about unify the development process, but to have the application running in less than 5 minutes, for people who never worked on that project before.&lt;/p&gt;

&lt;p&gt;Here a complete and working example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# lib/tasks/app.rake&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Setup the application&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;fileutils&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ENVIRONMENT&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;** Configuring servers.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;## Foreman&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*** Configuring Foreman.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Procfile.example&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Procfile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;## Pow&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*** Configuring Pow.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ln_sf&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;~/.pow&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tmp/always_restart.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# DATABASE&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;## Postgres&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;** Configuring database.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*** Configuring Postgres: your current UNIX username is being used for connection.&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;config&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;database.yml.example&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;config&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;database.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;## Setup&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*** Setting up the database.&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w( db )&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Kernel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;foreman start &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;db:setup&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*** [ ERROR ] failed to load the database: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;SIGTERM&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>HTML5 Geolocation Testing with Cucumber</title>
   <link href="http://lucaguidi.com/2011/02/13/html5-geolocation-testing-with-cucumber.html"/>
   <updated>2011-02-13T00:00:00+00:00</updated>
   <id>http://lucaguidi.com/2011/02/13/html5-geolocation-testing-with-cucumber</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;[ I wrote this post for &lt;a href=&quot;http://frestyl.com&quot; target=&quot;_blank&quot;&gt;frestyl&lt;/a&gt;, you can find the original article &lt;a href=&quot;http://frestyl.wordpress.com/2011/01/24/html5-geolocation-testing-with-cucumber/&quot;&gt;here&lt;/a&gt;. ]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
Here at frestyl we&#39;re working hard, using cutting edge technologies to promote their wider-scale adoption and to help set the new standards with our direct experience. In the past months our geolocation service has been changed from a somewhat flaky IP lookup to the new &lt;a href=&quot;http://www.w3.org/TR/geolocation-API/&quot; target=&quot;_blank&quot;&gt;HTML5 W3C draft&lt;/a&gt;. Our users noticed the difference and they are happier of the new level of precision.
&lt;/p&gt;

&lt;p&gt;
Technically speaking, the migration was challenging because our home page (the natural entry point for a web app) is a huge map which shows the events around the user. Previously, we silently located the user through a server side process, put that location in session, and loaded the map. No big deal, just a classic request/response cycle. However, implementing the new standard means that browsers will notify the user when an application is trying to get their current location.
&lt;/p&gt;

&lt;p&gt;
So what is the best way to handle this? Taking a UI page from the mobile development community, we chose to block our application with a modal dialog that aims to focus the user&#39;s attention on the browser&#39;s location prompt. Once the user responds to the browser, we change the state of the page accordingly. If they accept the geolocalization then we reload the page and display the map with content around the user&#39;s current location. Alternatively, if they decline, we prompt the user to explicitly enter a location, any location, around which they would like to base their experience.
&lt;/p&gt;

&lt;p&gt;
For frestyl geo is beyond essential, the application works on the assumption that everyone has a location, and so we can&#39;t let users dive in until they have specified where they are (or more accurately, where they want to see content for). By using a modal dialog we are taking a risk, but we are also making a bold statement. Location is actually that important. If it is true for mobile platforms &amp;dash; why should we consider a laptop to be any different?
&lt;/p&gt;

&lt;p&gt;
Aspirations aside, as you can imagine all this workflow is hard to test. Before we were just mocking the IP lookup against the various scenarios (success/failure/timeout) with RSpec and everyone was happy about it, but now, it&#39;s all done via javascript and things are more complicated.
&lt;/p&gt;

&lt;p&gt;
We want to share with other people facing similar challenges our experiences of how one might best write integration tests for the new HTML5 standards for Geolocation.
&lt;/p&gt;

&lt;h2&gt;Step 1: Clarify the Goals&lt;/h2&gt;

&lt;p&gt;
First of all: we separated acceptance tests from behaviors: the former are run via Cucumber (using Capybara) and the latter with BlueRidge (using Screw.Unit). The behaviors were easy to test, we wrapped the HTML5 Geolocation API with: &lt;code&gt;$.location&lt;/code&gt; and re-mocked all the scenarios. The hard part was to run integration tests in real browsers (which is the goal of this post).
&lt;/p&gt;

&lt;p&gt;
 Let&#39;s say we want to run this Cucumber feature:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cucumber&quot; data-lang=&quot;cucumber&quot;&gt;&lt;span class=&quot;nt&quot;&gt;@javascript&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Scenario:&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt; User is geolocalized&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;    When &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I go to the home page page&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;And &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I share my location and it returns &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;41.8954656,12.4823243&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Then &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;I should see a &amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Location found at: 41.8954656, 12.4823243&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;quot; message&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2&gt;Step 2: Proxy the API&lt;/h2&gt;

&lt;p&gt;
For obvious security reasons, developers can&#39;t access the Geolocation prompt that the browser gives to the user. This means that we can&#39;t even simulate a user click on accept (or reject) of the location lookup. So what to do? The main idea was to completely replace the Geolocation system while the tests were running, but if you try to assign something to &lt;code&gt;navigator.geolocation&lt;/code&gt; the browser raises an exception (or ignores it entirely, like Chrome).
&lt;/p&gt;

&lt;p&gt;
Our solution was to use a proxy to access to the wrapped API:
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// window.geolocation_provider is useful for testing purposes, not used in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// development/staging/production envs.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;geolocation_provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geolocation_provider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geolocation&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// usage:&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geolocation_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCurrentLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;successCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Step 3: Rack to the Rescue&lt;/h2&gt;

&lt;p&gt;
Sounds great, yeah? Let&#39;s get to the interesting part: we need to set the &lt;code&gt;window.geolocation_provider&lt;/code&gt; before the DOM is ready (the usual hook we use to initialize all the page scripts), otherwise the browser will still continue using &lt;code&gt;navigator.geolocation&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
To solve this we used a Rack middleware to inject some javascript just after the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag is opened, so the browser immediately executes it, assigning the value we want to mock.
&lt;/p&gt;

&lt;h2&gt;Step 4: Simulate Scenarios&lt;/h2&gt;

&lt;p&gt;
 We&#39;re not done yet, we still need to simulate user choice (accept/deny), Geolocation success, timeout and error scenarios. We easily can set from Ruby some Javascript top level vars for this purpose and let our implementation behave accordingly.

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// simplified code&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCurrentPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;timeout&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;simulateTimeoutError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Cucumber step&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute_script&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;state = &amp;#39;timeout&amp;#39;;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2&gt;Step 5: Celebrate&lt;/h2&gt;

&lt;p&gt;
Okay, so we&#39;ve managed to write reasonable integration tests and taken you through the biggest problems we encountered. You can find an example of a fully-working Rails 3 application using the HTML5 Geolocation standard with all the corresponding Cucumber scenarios implemented &lt;a href=&quot;https://github.com/frestyl/html5-geo-cucumber&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</content>
 </entry>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

</feed>
